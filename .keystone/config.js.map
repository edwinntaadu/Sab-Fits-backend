{
  "version": 3,
  "sources": ["../keystone.ts", "../schema.ts", "../auth.ts"],
  "sourcesContent": ["import 'dotenv/config';\nimport { config } from '@keystone-6/core';\nimport { lists } from './schema';\nimport { withAuth, session } from './auth';\n\nif (!process.env.DATABASE_URL) {\n  throw new Error('DATABASE_URL environment variable is not set');\n}\n\nconst databaseUrl = process.env.DATABASE_URL;\n\nexport default withAuth(\n  config({\n    db: {\n      provider: 'postgresql',\n      url: databaseUrl,\n      enableLogging: true,\n      idField: { kind: 'uuid' },\n    },\n    server: {\n      cors: {\n        origin: [process.env.FRONTEND_URL],\n        credentials: true,\n      },\n    },\n    lists,\n    session,\n    ui: {\n      isAccessAllowed: (context) => !!context.session?.data,\n    },\n  })\n);\n\n", "import 'dotenv/config';\nimport { cloudinaryImage } from '@keystone-6/cloudinary';\nimport { list } from '@keystone-6/core';\nimport { allowAll } from '@keystone-6/core/access';\nimport {\n  text,\n  relationship,\n  password,\n  timestamp,\n  select,\n  integer,\n} from '@keystone-6/core/fields';\nimport { document } from '@keystone-6/fields-document';\nimport type { Lists } from '.keystone/types';\n\nif (!process.env.CLOUDINARY_CLOUD_NAME || !process.env.CLOUDINARY_KEY || !process.env.CLOUDINARY_SECRET) {\n  throw new Error('Cloudinary environment variables are not set');\n}\n\nconst cloudinaryConfig = {\n  cloudName: process.env.CLOUDINARY_CLOUD_NAME,\n  apiKey: process.env.CLOUDINARY_KEY,\n  apiSecret: process.env.CLOUDINARY_SECRET,\n  folder: 'sabfits',\n};\n\nexport const lists: Lists = {\n  User: list({\n    access: allowAll,\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n      email: text({\n        validation: { isRequired: true },\n        isIndexed: 'unique',\n      }),\n      password: password({ validation: { isRequired: true } }),\n      createdAt: timestamp({\n        defaultValue: { kind: 'now' },\n      }),\n    },\n  }),\n  Product: list({\n    access: allowAll,\n    fields: {\n      name: text({validation: {isRequired: true }}),\n      description: text({\n        ui: {\n          displayMode: 'textarea',\n        },\n      }),\n      photo: relationship({\n        ref: 'ProductImage.product',\n        ui: {\n          displayMode: 'cards',\n          cardFields: ['image', 'altText'],\n          inlineCreate: { fields: ['image', 'altText'] },\n          inlineEdit: { fields: ['image', 'altText'] },\n        },\n      }),\n      status: select({\n        options: [\n          {label: 'Draft', value: 'DRAFT' },\n          {label: 'Available', value: 'AVAILABLE' },\n          {label: 'Unavailable', value: 'UNAVAILABLE' },\n        ],\n        defaultValue: 'DRAFT',\n        ui: {\n          displayMode: 'segmented-control',\n          createView: {fieldMode: 'hidden'},\n        },\n      }),\n      price: integer(),\n      // TODO: photo\n    },\n  }),\n  ProductImage: list({\n    access: allowAll,\n    fields: {\n      image: cloudinaryImage({\n        cloudinary: cloudinaryConfig,\n        label: 'Source',\n      }),\n      altText: text(),\n      product: relationship({ref: 'Product.photo'}),\n    },\n    ui: {\n      listView: {\n        initialColumns: ['image', 'altText', 'product'],\n      },\n    },\n  }),\n};\n", "import 'dotenv/config';\nimport { randomBytes } from 'crypto';\nimport { createAuth } from '@keystone-6/auth';\nimport { statelessSessions } from '@keystone-6/core/session';\n\n\nlet sessionSecret = process.env.SESSION_SECRET;\nif (!sessionSecret && process.env.NODE_ENV !== 'production') {\n  sessionSecret = randomBytes(32).toString('hex');\n}\n\nif (!sessionSecret) {\n  throw new Error('SESSION_SECRET environment variable is not set');\n}\n\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n  sessionData: 'id name email createdAt',\n  secretField: 'password',\n  initFirstItem: {\n    fields: ['name', 'email', 'password'],\n  },\n  passwordResetLink: {\n    async sendToken(args) {\n      console.log(args);\n    }\n  }\n});\n\nconst sessionMaxAge = 60 * 60 * 24 * 30;\n\nconst session = statelessSessions({\n  maxAge: sessionMaxAge,\n  secret: sessionSecret,\n});\n\nexport { withAuth, session };\n"],
  "mappings": "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",
  "names": ["import_config", "import_core", "import_config"]
}
