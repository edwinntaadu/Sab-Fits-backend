{
  "version": 3,
  "sources": ["../keystone.ts", "../schema.ts", "../auth.ts"],
  "sourcesContent": ["import 'dotenv/config';\n// Welcome to Keystone!\n//\n// This file is what Keystone uses as the entry-point to your headless backend\n//\n// Keystone imports the default export of this file, expecting a Keystone configuration object\n//   you can find out more at https://keystonejs.com/docs/apis/config\n\nimport { config } from '@keystone-6/core';\n\n// to keep this file tidy, we define our schema in a different file\nimport { lists } from './schema';\n\n// authentication is configured separately here too, but you might move this elsewhere\n// when you write your list-level access control functions, as they typically rely on session data\nimport { withAuth, session } from './auth';\n\nexport default withAuth(\n  config({\n    db: {\n      provider: 'postgresql',\n      url: process.env.DATABASE_URL,\n      enableLogging: true,\n      idField: { kind: 'uuid' },\n      // we're using sqlite for the fastest startup experience\n      //   for more information on what database might be appropriate for you\n      //   see https://keystonejs.com/docs/guides/choosing-a-database#title\n      //provider: 'sqlite',\n      //url: 'file:./keystone.db',\n    },\n    server: {\n      cors: {\n        origin: [process.env.FRONTEND_URL],\n        credentials: true,\n      },\n    },\n    lists,\n    session,\n  })\n);\n", "import { cloudinaryImage } from '@keystone-6/cloudinary';\nimport 'dotenv/config';\n// Welcome to your schema\n//   Schema driven development is Keystone's modus operandi\n//\n// This file is where we define the lists, fields and hooks for our data.\n// If you want to learn more about how lists are configured, please read\n// - https://keystonejs.com/docs/config/lists\n\nimport { list } from '@keystone-6/core';\nimport { allowAll } from '@keystone-6/core/access';\n\n// see https://keystonejs.com/docs/fields/overview for the full list of fields\n//   this is a few common fields for an example\nimport {\n  text,\n  relationship,\n  password,\n  timestamp,\n  select,\n  integer,\n} from '@keystone-6/core/fields';\n\n// the document field is a more complicated field, so it has it's own package\nimport { document } from '@keystone-6/fields-document';\n// if you want to make your own fields, see https://keystonejs.com/docs/guides/custom-fields\n\n// when using Typescript, you can refine your types to a stricter subset by importing\n// the generated types from '.keystone/types'\nimport type { Lists } from '.keystone/types';\n\nexport const lists: Lists = {\n  User: list({\n    // WARNING\n    //   for this starter project, anyone can create, query, update and delete anything\n    //   if you want to prevent random people on the internet from accessing your data,\n    //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n    access: allowAll,\n\n    // this is the fields for our User list\n    fields: {\n      // by adding isRequired, we enforce that every User should have a name\n      //   if no name is provided, an error will be displayed\n      name: text({ validation: { isRequired: true } }),\n\n      email: text({\n        validation: { isRequired: true },\n        // by adding isIndexed: 'unique', we're saying that no user can have the same\n        // email as another user - this may or may not be a good idea for your project\n        isIndexed: 'unique',\n      }),\n\n      password: password({ validation: { isRequired: true } }),\n\n      // we can use this field to see what Posts this User has authored\n      //   more on that in the Post list below\n      //posts: relationship({ ref: 'Post.author', many: true }),\n\n      createdAt: timestamp({\n        // this sets the timestamp to Date.now() when the user is first created\n        defaultValue: { kind: 'now' },\n      }),\n    },\n  }),\n  Product: list({\n    access: allowAll,\n    fields: {\n      name: text({validation: {isRequired: true }}),\n      description: text({\n        ui: {\n          displayMode: 'textarea',\n        },\n      }),\n      photo: relationship({\n        ref: 'ProductImage.product',\n        ui: {\n          displayMode: 'cards',\n          cardFields: ['image', 'altText'],\n          inlineCreate: { fields: ['image', 'altText'] },\n          inlineEdit: { fields: ['image', 'altText'] },\n        },\n      }),\n      status: select({\n        options: [\n          {label: 'Draft', value: 'DRAFT' },\n          {label: 'Available', value: 'AVAILABLE' },\n          {label: 'Unavailable', value: 'UNAVAILABLE' },\n        ],\n        defaultValue: 'DRAFT',\n        ui: {\n          displayMode: 'segmented-control',\n          createView: {fieldMode: 'hidden'},\n        },\n      }),\n      price: integer(),\n      // TODO: photo\n    },\n  }),\n  ProductImage: list({\n    access: allowAll,\n    fields: {\n      image: cloudinaryImage({\n        cloudinary: {\n          cloudName: process.env.CLOUDINARY_CLOUD_NAME,\n          apiKey: process.env.CLOUDINARY_KEY,\n          apiSecret: process.env.CLOUDINARY_SECRET,\n          folder: 'sabfits',\n        },\n        label: 'source'\n      }),\n      altText: text(),\n      product: relationship({ref: 'Product.photo'}),\n    },\n    ui: {\n      listView: {\n        initialColumns: ['image', 'altText', 'product'],\n      },\n    },\n  }),\n};\n", "// Welcome to some authentication for Keystone\n//\n// This is using @keystone-6/auth to add the following\n// - A sign-in page for your Admin UI\n// - A cookie-based stateless session strategy\n//    - Using a User email as the identifier\n//    - 30 day cookie expiration\n//\n// This file does not configure what Users can do, and the default for this starter\n// project is to allow anyone - logged-in or not - to do anything.\n//\n// If you want to prevent random people on the internet from accessing your data,\n// you can find out how by reading https://keystonejs.com/docs/guides/auth-and-access-control\n//\n// If you want to learn more about how our out-of-the-box authentication works, please\n// read https://keystonejs.com/docs/apis/auth#authentication-api\n\nimport { randomBytes } from 'crypto';\nimport { createAuth } from '@keystone-6/auth';\nimport 'dotenv/config';\n\n// see https://keystonejs.com/docs/apis/session for the session docs\nimport { statelessSessions } from '@keystone-6/core/session';\n\n// for a stateless session, a SESSION_SECRET should always be provided\n//   especially in production (statelessSessions will throw if SESSION_SECRET is undefined)\nlet sessionSecret = process.env.SESSION_SECRET;\nif (!sessionSecret && process.env.NODE_ENV !== 'production') {\n  sessionSecret = randomBytes(32).toString('hex');\n}\n\n// withAuth is a function we can use to wrap our base configuration\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n\n  // this is a GraphQL query fragment for fetching what data will be attached to a context.session\n  //   this can be helpful for when you are writing your access control functions\n  //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n  sessionData: 'name createdAt',\n  secretField: 'password',\n\n  // WARNING: remove initFirstItem functionality in production\n  //   see https://keystonejs.com/docs/config/auth#init-first-item for more\n  initFirstItem: {\n    // if there are no items in the database, by configuring this field\n    //   you are asking the Keystone AdminUI to create a new user\n    //   providing inputs for these fields\n    fields: ['name', 'email', 'password'],\n\n    // it uses context.sudo() to do this, which bypasses any access control you might have\n    //   you shouldn't use this in production\n  },\n});\n\n// statelessSessions uses cookies for session tracking\n//   these cookies have an expiry, in seconds\n//   we use an expiry of 30 days for this starter\nconst sessionMaxAge = 60 * 60 * 24 * 30;\n\n// you can find out more at https://keystonejs.com/docs/apis/session#session-api\nconst session = statelessSessions({\n  maxAge: sessionMaxAge,\n  secret: sessionSecret!,\n});\n\nexport { withAuth, session };\n"],
  "mappings": "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",
  "names": ["import_config", "import_core", "import_config"]
}
